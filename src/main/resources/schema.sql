DROP TABLE IF EXISTS
    mpa,
    genre,
    films,
    film_genre,
    users,
    likes,
    friends,
    director,
    director_films,
    reviews,
    review_likes,
    feed;

CREATE TABLE IF NOT EXISTS mpa
(
    id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS genre
(
    id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS films (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar (200) NOT NULL,
    description varchar,
    release_date date,
    duration INTEGER,
    mpa_id INTEGER REFERENCES mpa (id)
);

CREATE TABLE IF NOT EXISTS film_genre (
    genre_id INTEGER REFERENCES genre (id) ON DELETE RESTRICT,
    film_id INTEGER REFERENCES films (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS users (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email varchar NOT NULL UNIQUE,
    login varchar NOT NULL UNIQUE,
    name varchar,
    birthday date
);

CREATE TABLE IF NOT EXISTS likes (
    user_id INTEGER REFERENCES users (id) ON DELETE CASCADE,
    film_id INTEGER REFERENCES films (id) ON DELETE CASCADE,

    PRIMARY KEY(user_id, film_id)


);

CREATE TABLE IF NOT EXISTS friends (
    user_id INTEGER REFERENCES users (id) ON DELETE CASCADE,
    friend_id INTEGER REFERENCES users (id) ON DELETE CASCADE

);

CREATE TABLE IF NOT EXISTS director
(
    id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar NOT NULL
);

CREATE TABLE IF NOT EXISTS director_films
(
    film_id     INTEGER REFERENCES films (id) ON DELETE CASCADE,
    director_id INTEGER REFERENCES director (id) ON DELETE CASCADE,
    PRIMARY KEY (film_id, director_id)
);

CREATE TABLE IF NOT EXISTS reviews
(
    review_id   integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    content     varchar,
    is_positive boolean,
    users_id    integer REFERENCES users (id) ON DELETE CASCADE,
    films_id    integer REFERENCES films (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS review_likes
(
    review_id   integer REFERENCES reviews (review_id) ON DELETE CASCADE,
    users_id    integer REFERENCES users (id) ON DELETE CASCADE,
    is_positive boolean,
    PRIMARY KEY (review_id, users_id)
);

CREATE TABLE IF NOT EXISTS feed
(
    user_id integer REFERENCES users (id) ON DELETE CASCADE,
    event_type enum('LIKE','REVIEW','FRIEND'),
    operation enum('ADD','REMOVE','UPDATE'),
    event_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    entity_id integer,
    time_stamp timestamp
);

